/* Exercice : le juste nombre */

/* üéØ Objectif :
L‚Äôutilisateur doit deviner un nombre al√©atoire choisi par l‚Äôordinateur. Il re√ßoit des indices ("trop grand", "trop petit") jusqu‚Äô√† trouver la bonne r√©ponse ou √©puiser ses tentatives.

üìù Consignes :
Le programme choisit un nombre al√©atoire entre 1 et 100 (ou 1 et 50 si tu pr√©f√®res une version plus simple).
L‚Äôutilisateur a un nombre limit√© de tentatives (par exemple 7).

√Ä chaque tentative :
L‚Äôutilisateur entre un nombre.

Le programme indique si le nombre est :
Trop grand
Trop petit
Juste

Si la r√©ponse est juste : victoire üéâ
Si les tentatives sont √©puis√©es : d√©faite üò¢
√Ä la fin de la partie, demande si l'utilisateur veut rejouer.

G√®re les erreurs (si l‚Äôutilisateur entre autre chose qu‚Äôun nombre, ou un nombre hors des limites).
üîß Contraintes techniques :
Utilise des fonctions (ex: genererNombre, verifierProposition, rejouer, etc.)
Utilise une boucle (while ou for) pour g√©rer le d√©roulement des tentatives.
Stocke les propositions de l‚Äôutilisateur dans un tableau pour :
Lui interdire de rejouer le m√™me chiffre.
Lui rappeler ses essais pr√©c√©dents si tu veux aller plus loin.

Optionnel : Affiche le nombre de tentatives restantes.

‚ú® Bonus (si tu veux aller plus loin) :
Ajoute un niveau de difficult√© (facile : 10 tentatives, difficile : 5, etc.)
Ajoute un score ou un syst√®me de high score. */

/* -------------- Algorithmie pour r√©ussir √† concevoir ce jeu -------------------- */
// 1. Cr√©er une fonction pour g√©n√©rer un nombre al√©atoire entre 1 et 100 => utilisation de Math.random 
// 2. Cr√©er une fonction de v√©rification de la proposition => tableau.includes ou if (tableau[i] === answer) et stocker les propositions faites pour l'emp√™cher de les rejouer ou de lui rappeler ce qu'il a fait. 
// 3. Cr√©er une fonction rejouer tant que le nombre de proposition n'est pas √©puis√© 
// 4. D√©finir un nombre limite de tentatives en cr√©ant une variable et en stockant 7. 


/* Cr√©ation d'une fonction g√©n√©rant un nombre al√©atoire compris entre 1 et 100 */

function numberHard(){
    let attempts = 7;
    let attemptsPlayed = 0;
    let numbersTried = [];

    randomNumber = Math.floor(Math.random()*100 + 1);
    return randomNumber;
}
function numberMedium(){
    let attempts = 10;
    let attemptsPlayed = 0;
    let numbersTried = [];

    randomNumber = Math.floor(math.random() * 70 + 1);
    return randomNumber;
}
function numberEasy(){
    let attempts = 10;
    let attemptsPlayed = 0;
    let numbersTried = [];

    randomNumber = Math.floor(math.random() * 50 + 1);
    return randomNumber;
}

/* Lancement d'une partie */ 

let jouer = "oui";

while (jouer.toLowerCase() === "oui") {
    // On demande au joueur quel niveau de difficult√© il veut en fonction de sa r√©ponse on modifie le nombre d'essai et l'interval du nombre myst√®re.
    let level = prompt("Quel niveau de difficult√© voulez-vous : facile, moyen, difficile ?").toLowerCase();
    
    // Si la r√©ponse du joueur est facile on appelle la fonction numberEasy : 

    if (level === "facile"){
        numberEasy();
    } else if (level === "medium"){
        numberMedium();
    } else if (level === "difficile"){
        numberHard();
    }
    //On initialise les conditions qui permettent au joueur d'effectuer des tentatives
    while(attempts > 0){

         let guess = parseInt(prompt("Essayez de deviner le nombre myst√®re entre 1 et 100"));

        // Limitation des erreurs de r√©ponses avant de comptabiliser une partie
        if (isNaN(guess)) {
            alert(`Il faut rentrer imp√©rativement des chiffres et non des lettres ! ${guess} n'est pas un chiffre.`);
        } else if (guess < 1 || guess > 100){
            alert("Le nombre saisi n'est pas compris entre 1 et 100 inclus.");
        } else if (numbersTried.includes(guess)){
            alert (`Vous avez d√©j√† essay√© le nombre "${guess}". Essayez un autre nombre.`)
            let attemptsTried = prompt("Voulez-vous voir la liste des num√©ros que vous avez d√©j√† essay√© ?").toLowerCase();
            if(attemptsTried === "oui"){
                alert(`Voici les num√©ros que vous avez d√©j√† essay√© : ${numbersTried}.`);
            }  
        // On d√©finit le comportement en fonction des r√©ponses du joueur.
        } else {      
            if(guess > randomNumber){
               attempts --;
               attemptsPlayed ++;
               numbersTried.push(guess);        
               alert(`C'est moins que "${guess}". Il vous reste encore ${attempts} tentatives.`);

                if (attempts === 0){
                    alert(`Vous avez perdu ! Le bon nombre √©tait : ${randomNumber}.`)
                    jouer = prompt("Voulez-vous rejouer une partie ?").toLowerCase();
                }

            } else if (guess < randomNumber){
                attempts --;
                attemptsPlayed ++;
                numbersTried.push(guess);
                alert(`C'est plus que "${guess}". Il vous reste encore ${attempts} tentatives.`)

                 if (attempts === 0){
                    alert(`Vous avez perdu ! Le bon nombre √©tait : ${randomNumber}.`)
                    jouer = prompt("Voulez-vous rejouer une partie ?").toLowerCase();
                }
                
            } else {
                alert (`Vous avez trouv√© le bon nombre en ${attemptsPlayed} tentatives ! `)
                jouer = prompt("Voulez-vous rejouer une partie ?").toLowerCase();
            }
        }
    }
}

